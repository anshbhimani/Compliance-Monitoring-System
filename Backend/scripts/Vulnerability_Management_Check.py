import requests
import json
import time

import logging

logging.basicConfig(level=logging.INFO,filename='LogFile.log',filemode='a',format='%(asctime)s - %(levelname)s - File: %(filename)s , Line: %(lineno)d - %(message)s')


# OpenVAS settings
OPENVAS_URL = "http://localhost:9392"  # Adjust based on your installation
USERNAME = "your_username"
PASSWORD = "your_password"

# Set the headers for the OpenVAS API
headers = {
    'Content-Type': 'application/json',
}

def authenticate():
    """
    Authenticate with the OpenVAS API.
    """
    response = requests.post(f"{OPENVAS_URL}/login", auth=(USERNAME, PASSWORD))
    if response.status_code == 200:
        print("Authentication successful.")
        return response.cookies
    else:
        raise Exception("Authentication failed.")

def create_target(cookies, target_name, target_ip):
    """
    Create a target in OpenVAS.
    """
    target_data = {
        "name": target_name,
        "hosts": target_ip
    }
    response = requests.post(f"{OPENVAS_URL}/targets", headers=headers, cookies=cookies, data=json.dumps(target_data))
    if response.status_code == 201:
        print(f"Target '{target_name}' created successfully.")
        return response.json()['id']
    else:
        raise Exception("Failed to create target.")

def create_task(cookies, task_name, target_id):
    """
    Create a scan task in OpenVAS.
    """
    task_data = {
        "name": task_name,
        "target_id": target_id,
        "scanner_id": "daba5d82-66e2-4a5e-bfe2-785a7518cf6e"  # Default scanner
    }
    response = requests.post(f"{OPENVAS_URL}/tasks", headers=headers, cookies=cookies, data=json.dumps(task_data))
    if response.status_code == 201:
        print(f"Task '{task_name}' created successfully.")
        return response.json()['id']
    else:
        raise Exception("Failed to create task.")

def start_task(cookies, task_id):
    """
    Start a scan task in OpenVAS.
    """
    response = requests.post(f"{OPENVAS_URL}/tasks/{task_id}/start", headers=headers, cookies=cookies)
    if response.status_code == 202:
        print("Scan task started successfully.")
    else:
        raise Exception("Failed to start task.")

def check_task_status(cookies, task_id):
    """
    Check the status of the scan task.
    """
    response = requests.get(f"{OPENVAS_URL}/tasks/{task_id}", headers=headers, cookies=cookies)
    if response.status_code == 200:
        return response.json()['status']
    else:
        raise Exception("Failed to check task status.")

def get_scan_results(cookies, task_id):
    """
    Retrieve the scan results from OpenVAS.
    """
    response = requests.get(f"{OPENVAS_URL}/tasks/{task_id}/results", headers=headers, cookies=cookies)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception("Failed to retrieve scan results.")

def analyze_results(results):
    """
    Analyze the scan results and determine the compliance status.
    """
    issues = []
    for result in results['results']:
        severity = result['severity']
        plugin_id = result['plugin_id']
        plugin_name = result['plugin_name']
        description = result['description']

        if severity == 'Critical':
            issues.append((plugin_name, description, "Critical vulnerability found; immediate action required."))
        elif severity == 'High':
            issues.append((plugin_name, description, "High severity vulnerability; please address promptly."))
        elif severity == 'Medium':
            issues.append((plugin_name, description, "Medium severity vulnerability; consider fixing."))
        elif severity == 'Low':
            issues.append((plugin_name, description, "Low severity vulnerability; assess risk and fix if necessary."))

    return issues

def run_checks(ssh,password):
    try:
        cookies = authenticate()
        
        # Step 1: Create Target
        target_name = "Example Target"
        target_ip = "192.168.1.10"  # Replace with the actual target IP
        target_id = create_target(cookies, target_name, target_ip)

        # Step 2: Create Task
        task_name = "Example Scan Task"
        task_id = create_task(cookies, task_name, target_id)

        # Step 3: Start Task
        start_task(cookies, task_id)

        # Step 4: Wait for Scan to Complete
        print("Waiting for the scan to complete...")
        while True:
            status = check_task_status(cookies, task_id)
            print(f"Current Task Status: {status}")
            if status in ['Done', 'Failed']:
                break
            time.sleep(10)  # Wait before checking status again

        # Step 5: Get Scan Results
        scan_results = get_scan_results(cookies, task_id)
        
        # Step 6: Analyze Results
        issues = analyze_results(scan_results)
        if issues:
            print("Vulnerabilities Found:")
            for issue in issues:
                plugin_name, description, action = issue
                print(f"Plugin: {plugin_name}\nDescription: {description}\nAction: {action}\n")
        else:
            print("No vulnerabilities found.")

    except Exception as e:
        print(f"Error: {str(e)}")


if __name__ == "__main__":
    run_checks()
